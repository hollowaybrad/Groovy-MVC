

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

<%def modelLowerCase = model.toLowerCase()%>

@Controller
@RequestMapping("/${modelLowerCase}")
public class ${model}Controller {
	
	@Autowired
	${model}Repository ${modelLowerCase}Repository;

	@RequestMapping(value = "/index")
	public String index(Model model){
		List<${model}> ${modelLowerCase}s = ${modelLowerCase}Repository.list();
		model.addAttribute("${modelLowerCase}InstanceList", ${modelLowerCase}s);
		return "${modelLowerCase}/index";
	}
	
	@RequestMapping(value = "/show/{id}")
	public String show(Model model, @PathVariable("id") Integer id){
		model.addAttribute("${modelLowerCase}Instance", ${modelLowerCase}Repository.load(id));
		return "${modelLowerCase}/show";
	}
	
	@RequestMapping(value = "/create")
	public String create(Model model){
		model.addAttribute("${modelLowerCase}Instance", new ${model}());
		return "${modelLowerCase}/create";
	}
	
	@Transactional
	@RequestMapping(value = "/save")
	public String save(Model model, @Valid ${model} ${modelLowerCase}Instance, RedirectAttributes redirectAttributes, BindingResult result){
		
		if (result.hasErrors()) {	
			model.addAttribute("errors", result.getErrors());
			model.addAttribute("${modelLowerCase}Instance", ${modelLowerCase}Instance);
			return "${modelLowerCase}/create";
		}

		${modelLowerCase}Repository.save(${modelLowerCase}Instance);

		redirectAttributes.addFlashAttribute("message", SpringPropertyUtils.getProperty("message.${modelLowerCase}.created"));

		return "${modelLowerCase}/list";
	}
	
	@RequestMapping(value = "/edit/{id}")
	public String edit(Model model, @PathVariable("id") Integer id){
		model.addAttribute("${modelLowerCase}Instance", ${modelLowerCase}Repository.get(id));
		return "${modelLowerCase}/edit";
	}

	@Transactional
	@RequestMapping(value = "/update/{id}")
	public String update(Model model, @Valid @ModelAttribute("${modelLowerCase}Instance") ${model} ${modelLowerCase}Instance, RedirectAttributes redirectAttributes, BindingResult result){
		
		if (result.hasErrors()) {
			model.addAttribute("errors", result.getErrors());
			model.addAttribute("${modelLowerCase}Instance", ${modelLowerCase}Instance);
			return "${modelLowerCase}/edit";
		}
		
		${modelLowerCase}Repository.save(${modelLowerCase}Instance);
		
		redirectAttributes.addFlashAttribute("message", SpringPropertyUtils.getProperty("message.${modelLowerCase}.updated"));
		
		return "${modelLowerCase}/list";
	}
	
	@Transactional
	@RequestMapping(value = "/delete/{id}")
	public String delete(Model model, @PathVariable("id") Integer id, RedirectAttributes redirectAttributes){
	
		${model} ${model}Instance = ${modelLowerCase}Repository.get(id);

		${modelLowerCase}Repository.delete(${model}Instance);

		redirectAttributes.addFlashAttribute("message", SpringPropertyUtils.getProperty("message.${modelLowerCase}.deleted"));

		return "${modelLowerCase}/list";
	}


}